# NOTE: This file is generated by yotta: changes will be overwritten!

cmake_minimum_required(VERSION 2.8.11)

enable_testing()

# add a dummy target for all autogenerated tests, so we can build them all
# even though they are EXCLUDE_FROMALL'd, if you use custom CMakeLists you can
# add a dependency of this target on your test programs, by adding:
# add_dependencies(all_tests your_test_name)
add_custom_target(all_tests)


# always use the CMAKE_MODULE_PATH-provided .cmake files, even when including
# from system directories:
cmake_policy(SET CMP0017 OLD)

# toolchain file for st-nucleo-f401re-gcc
set(CMAKE_TOOLCHAIN_FILE "D:/Projects/blinky/build/st-nucleo-f401re-gcc/toolchain.cmake")

# provide function for post-processing executables
function (yotta_postprocess_target target_type_ target_name_)
    if(COMMAND yotta_apply_target_rules)
        yotta_apply_target_rules(${target_type_} ${target_name_})
    endif()

    # For backwards compatibility, support YOTTA_POSTPROCESS_COMMAND.
    if(DEFINED YOTTA_POSTPROCESS_COMMAND AND ${target_type_} STREQUAL "EXECUTABLE")
        #message(AUTHOR_WARNING "This target defines a YOTTA_POSTPROCESS_COMMAND for which support has been deprecated. Please define a CMake function yotta_apply_target_rules(build_object_type build_object) instead.")
        string(REPLACE YOTTA_CURRENT_EXE_NAME "${target_name_}" LOCAL_POSTPROCESS_COMMAND "${YOTTA_POSTPROCESS_COMMAND}")
        separate_arguments(LOCAL_POSTPROCESS_COMMAND_SEPARATED UNIX_COMMAND ${LOCAL_POSTPROCESS_COMMAND})
        add_custom_command(
            TARGET ${target_name_}
            POST_BUILD
            COMMAND ${LOCAL_POSTPROCESS_COMMAND_SEPARATED}
        )
    endif()
endfunction()

# set target-defined definitions
set(YOTTA_BUILD_YEAR "2016") # UTC year
set(YOTTA_BUILD_MONTH "1") # UTC month 1-12
set(YOTTA_BUILD_DAY "7") # UTC day 1-31
set(YOTTA_BUILD_HOUR "22") # UTC hour 0-24
set(YOTTA_BUILD_MINUTE "3") # UTC minute 0-59
set(YOTTA_BUILD_SECOND "54") # UTC second 0-61
set(YOTTA_BUILD_UUID "130856a1-a52e-4414-a500-7a71f4275b98") # unique random UUID for each build
set(TARGET ST_NUCLEO_F401RE_GCC)
set(TARGET_LIKE_ST_NUCLEO_F401RE_GCC TRUE)
set(YOTTA_BUILD_INFO_HEADER "D:/Projects/blinky/build/st-nucleo-f401re-gcc/yotta_build_info.h")
set(TARGET_LIKE_ST_NUCLEO_F401RE_GCC TRUE)
set(TARGET_LIKE_NUCLEO_F401RE TRUE)
set(TARGET_LIKE_F401RE TRUE)
set(TARGET_LIKE_F401 TRUE)
set(TARGET_LIKE_NUCLEO TRUE)
set(TARGET_LIKE_STM32F401RET6 TRUE)
set(TARGET_LIKE_STM32F401RE TRUE)
set(TARGET_LIKE_STM32F401XE TRUE)
set(TARGET_LIKE_STM32F401 TRUE)
set(TARGET_LIKE_STM32F4 TRUE)
set(TARGET_LIKE_STM32 TRUE)
set(TARGET_LIKE_ST TRUE)
set(TARGET_LIKE_CORTEX_M4 TRUE)
set(TARGET_LIKE_ARMV7_M TRUE)
set(TARGET_LIKE_ARM TRUE)
set(TARGET_LIKE_GCC TRUE)
set(TARGET_LIKE_MBED TRUE)
set(TARGET_LIKE_MBED_GCC TRUE)
set(TARGET_LIKE_MBED TRUE)
set(TARGET_LIKE_ARM TRUE)
set(TARGET_LIKE_GCC TRUE)
set(YOTTA_CFG TRUE)
set(YOTTA_CFG_MINAR TRUE)
set(YOTTA_CFG_MINAR_INITIAL_EVENT_POOL_SIZE 50)
set(YOTTA_CFG_MINAR_ADDITIONAL_EVENT_POOLS_SIZE 100)
set(YOTTA_CFG_MBED_OS TRUE)
set(YOTTA_CFG_MBED_OS_STDIO TRUE)
set(YOTTA_CFG_MBED_OS_STDIO_DEFAULT_BAUD 9600)
set(YOTTA_CFG_CMSIS TRUE)
set(YOTTA_CFG_CMSIS_NVIC TRUE)
set(YOTTA_CFG_CMSIS_NVIC_RAM_VECTOR_ADDRESS 0x20000000)
set(YOTTA_CFG_CMSIS_NVIC_FLASH_VECTOR_ADDRESS 0x08000000)
set(YOTTA_CFG_CMSIS_NVIC_USER_IRQ_OFFSET 16)
set(YOTTA_CFG_CMSIS_NVIC_USER_IRQ_NUMBER 85)
set(YOTTA_CFG_HARDWARE TRUE)
set(YOTTA_CFG_HARDWARE_EXTERNALCLOCK 8000000)
set(YOTTA_CFG_HARDWARE_PINS TRUE)
set(YOTTA_CFG_HARDWARE_PINS_LED1 PA_5)
set(YOTTA_CFG_HARDWARE_PINS_LED2 PA_5)
set(YOTTA_CFG_HARDWARE_PINS_LED3 PG_5)
set(YOTTA_CFG_HARDWARE_PINS_LED4 PG_5)
set(YOTTA_CFG_HARDWARE_PINS_USER_BUTTON PC_13)
set(YOTTA_CFG_HARDWARE_PINS_BUTTON1 PC_13)
set(YOTTA_CFG_HARDWARE_PINS_SERIAL_TX PA_2)
set(YOTTA_CFG_HARDWARE_PINS_SERIAL_RX PA_3)
set(YOTTA_CFG_HARDWARE_PINS_USBTX PA_2)
set(YOTTA_CFG_HARDWARE_PINS_USBRX PA_3)
set(YOTTA_CFG_HARDWARE_PINS_I2C_SCL PB_8)
set(YOTTA_CFG_HARDWARE_PINS_I2C_SDA PB_9)
set(YOTTA_CFG_HARDWARE_PINS_SPI_MOSI PA_7)
set(YOTTA_CFG_HARDWARE_PINS_SPI_MISO PA_6)
set(YOTTA_CFG_HARDWARE_PINS_SPI_SCK PA_5)
set(YOTTA_CFG_HARDWARE_PINS_SPI_CS PA_6)
set(YOTTA_CFG_HARDWARE_PINS_PWM_OUT PB_3)
set(YOTTA_CFG_HARDWARE_PINS_A0 PA_0)
set(YOTTA_CFG_HARDWARE_PINS_A1 PA_1)
set(YOTTA_CFG_HARDWARE_PINS_A2 PA_4)
set(YOTTA_CFG_HARDWARE_PINS_A3 PB_0)
set(YOTTA_CFG_HARDWARE_PINS_A4 PC_1)
set(YOTTA_CFG_HARDWARE_PINS_A5 PC_0)
set(YOTTA_CFG_HARDWARE_PINS_D0 PA_3)
set(YOTTA_CFG_HARDWARE_PINS_D1 PA_2)
set(YOTTA_CFG_HARDWARE_PINS_D2 PA_10)
set(YOTTA_CFG_HARDWARE_PINS_D3 PB_3)
set(YOTTA_CFG_HARDWARE_PINS_D4 PB_5)
set(YOTTA_CFG_HARDWARE_PINS_D5 PB_4)
set(YOTTA_CFG_HARDWARE_PINS_D6 PB_10)
set(YOTTA_CFG_HARDWARE_PINS_D7 PA_8)
set(YOTTA_CFG_HARDWARE_PINS_D8 PA_9)
set(YOTTA_CFG_HARDWARE_PINS_D9 PC_7)
set(YOTTA_CFG_HARDWARE_PINS_D10 PB_6)
set(YOTTA_CFG_HARDWARE_PINS_D11 PA_7)
set(YOTTA_CFG_HARDWARE_PINS_D12 PA_6)
set(YOTTA_CFG_HARDWARE_PINS_D13 PA_5)
set(YOTTA_CFG_HARDWARE_PINS_D14 PB_9)
set(YOTTA_CFG_HARDWARE_PINS_D15 PB_8)
set(YOTTA_CFG_ARCH TRUE)
set(YOTTA_CFG_ARCH_ARM TRUE)
set(YOTTA_CFG_MBED TRUE)
set(YOTTA_CONFIG_MERGED_JSON_FILE "D:/Projects/blinky/build/st-nucleo-f401re-gcc/yotta_config.json")


project(blinky)

# Definitions provided by the target configuration info:
if(NOT DEFINED YOTTA_FORCE_INCLUDE_FLAG)
    # backwards-compatibility hack for ARMCC only: Do not add new compilers here!
    if("${CMAKE_C_COMPILER_ID}" STREQUAL "ARMCC")
        set(YOTTA_FORCE_INCLUDE_FLAG "--preinclude")
    else()
        set(YOTTA_FORCE_INCLUDE_FLAG "-include")
    endif()
endif()
add_definitions("${YOTTA_FORCE_INCLUDE_FLAG} \"D:/Projects/blinky/build/st-nucleo-f401re-gcc/yotta_config.h\"")

# include root directories of all components we depend on (directly and
# indirectly, including ourself)
include_directories("D:/Projects/blinky")
include_directories("D:/Projects/blinky/yotta_modules/mbed-drivers")
include_directories("D:/Projects/blinky/yotta_modules/mbed-hal")
include_directories("D:/Projects/blinky/yotta_modules/cmsis-core")
include_directories("D:/Projects/blinky/yotta_modules/ualloc")
include_directories("D:/Projects/blinky/yotta_modules/minar")
include_directories("D:/Projects/blinky/yotta_modules/core-util")
include_directories("D:/Projects/blinky/yotta_modules/compiler-polyfill")
include_directories("D:/Projects/blinky/yotta_modules/mbed-hal-st")
include_directories("D:/Projects/blinky/yotta_modules/mbed-hal-st-stm32f4")
include_directories("D:/Projects/blinky/yotta_modules/uvisor-lib")
include_directories("D:/Projects/blinky/yotta_modules/mbed-hal-st-stm32cubef4")
include_directories("D:/Projects/blinky/yotta_modules/mbed-hal-st-stm32f401re")
include_directories("D:/Projects/blinky/yotta_modules/cmsis-core-st")
include_directories("D:/Projects/blinky/yotta_modules/cmsis-core-stm32f4")
include_directories("D:/Projects/blinky/yotta_modules/cmsis-core-stm32f401xe")
include_directories("D:/Projects/blinky/yotta_modules/dlmalloc")
include_directories("D:/Projects/blinky/yotta_modules/minar-platform")
include_directories("D:/Projects/blinky/yotta_modules/minar-platform-mbed")


# recurse into dependencies that aren't built elsewhere
add_subdirectory(
   "D:/Projects/blinky/build/st-nucleo-f401re-gcc/ym/mbed-drivers"
   "${CMAKE_BINARY_DIR}/ym/mbed-drivers"
)



# And others (typically CMSIS implementations) need to export non-system header
# files. Please don't use this facility. Please. It's much, much better to fix
# implementations that import these headers to import them using the full path.
include_directories("D:/Projects/blinky/yotta_modules/mbed-drivers/mbed")
include_directories("D:/Projects/blinky/yotta_modules/mbed-hal/mbed-hal")
include_directories("D:/Projects/blinky/yotta_modules/cmsis-core/cmsis-core")
include_directories("D:/Projects/blinky/yotta_modules/mbed-hal-st-stm32f4/mbed-hal-st-stm32f4")
include_directories("D:/Projects/blinky/yotta_modules/mbed-hal-st-stm32cubef4/mbed-hal-st-stm32cubef4")
include_directories("D:/Projects/blinky/yotta_modules/mbed-hal-st-stm32f401re/mbed-hal-st-stm32f401re")
include_directories("D:/Projects/blinky/yotta_modules/cmsis-core-stm32f4/cmsis-core-stm32f4")
include_directories("D:/Projects/blinky/yotta_modules/cmsis-core-stm32f401xe/cmsis-core-stm32f401xe")


# modules with custom CMake build systems may append to the
# YOTTA_GLOBAL_INCLUDE_DIRS property to add compile-time-determined include
# directories:
get_property(GLOBAL_INCLUDE_DIRS GLOBAL PROPERTY YOTTA_GLOBAL_INCLUDE_DIRS)
include_directories(${GLOBAL_INCLUDE_DIRS})

# Provide versions of all the components we depend on, the corresponding
# preprocessor definitions are generated in yotta_config.h
set(YOTTA_MBED_DRIVERS_VERSION_STRING "0.11.6")
set(YOTTA_MBED_DRIVERS_VERSION_MAJOR 0)
set(YOTTA_MBED_DRIVERS_VERSION_MINOR 11)
set(YOTTA_MBED_DRIVERS_VERSION_PATCH 6)
set(YOTTA_BLINKY_VERSION_STRING "0.0.0")
set(YOTTA_BLINKY_VERSION_MAJOR 0)
set(YOTTA_BLINKY_VERSION_MINOR 0)
set(YOTTA_BLINKY_VERSION_PATCH 0)

# provide the name of the current module so that it's available to custom CMake
# even if custom CMake does weird things with project()
set(YOTTA_MODULE_NAME blinky)

# recurse into subdirectories for this component, using the two-argument
# add_subdirectory because the directories referred to here exist in the source
# tree, not the working directory
add_subdirectory(
    "D:/Projects/blinky/build/st-nucleo-f401re-gcc/source"
    "${CMAKE_BINARY_DIR}/./source"
)

# make YOTTA_MODULE_NAME available as a preprocessor symbol when
# compiling this module:
target_compile_definitions(blinky PRIVATE "-DYOTTA_MODULE_NAME=blinky")

# include .cmake files provided by the target:
include("D:/Projects/blinky/yotta_targets/mbed-gcc/coverage/coverage.cmake")
